swagger: "2.0"
info:
  version: "0.0.1"
  title: Cost-Manger
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths
basePath: /
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /flights/{id}:
    get:
      description: "Retrieve a single flight by id"
      x-swagger-router-controller:
        "FlightById"
      operationId: "FlightById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the flights to get"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/flight"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      description: "Delete a todo by Id"
      operationId: "DeleteTodoById"
      parameters:
      - name: "id"
        in: "path"
        description: "id of the flight to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "flight deleted"
      x-swagger-router-controller:
        "DeleteFlightById"
    put:
      description: "Update a single to by id"
      operationId: "UpdateTodoById"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the flight being added"
        required: true
        type: "integer"
        format: "int64"
      - name: "updated_todo"
        in: "body"
        description: "the added flight"
        required: true
        schema:
          $ref: "#/definitions/flight"
      responses:
        200:
          description: "flight added"
        400:
          description: "We have an error!"

  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
 flight:
  type: "object"
  properties:
    flight_id:
      type: "integer"
      description: "Id for the flight"
    current_city:
      type: "string"
      description: "current_city for the flight"
    departure:
      type: "string"
      format: "date-time"
      description: "Timestamp the flight departured"
    arrivial:
      type: "string"
      format: "date-time"
      description: "Timestamp the flight arrival"
    price:
      type: "integer"
      description: "the air plan ticket price"
    airline:
      type: "string"
      description: "the name of the airline"
ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
